@using Blazor_FoodAppWeb.Data
@inject Blazor_FoodAppWeb.IService.IMenuService menuService
@using Blazor_FoodAppWeb.PageClass

@page "/menu"

<PageTitle>Menu</PageTitle>


<style>
    * {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
    scroll-behavior: smooth;
    list-style: none;
    text-decoration: none;
}

:root {
    --main-color: #F24E1E;
    --text-color: #2e2e2e;
    --bg-color: #d9d9d9;
    --big-font: 5rem;
    --h2-font: 2.25rem;
    --p-font: 0.9rem;
}

*::selection {
    background: var(--main-color);
    color: #fff;
}

body {
    color: var(--text-color);
    background: var(--bg-color);
}

section {
    padding: 40px;
    width:100%;
    height:auto;

}

.menu-container {
    width:100%;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, auto));
    grid-gap: 1.5rem;
    align-items: center;
}

.box {
    position: relative;
    margin-top: 4rem;
    height: auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: #fff;
    padding: 20px;
    border-radius: 0.5rem;
}

.box-img {
    width: 180px;
    height: 180px;
}

    .box-img img {
        width: 100%;
        height: 100%;
    }

.box h2 {
    font-size: 1.3rem;
    color: var(--text-color);
}

.box h3 {
    font-size: 1rem;
    color: var(--text-color);
    font-weight: 400;
    margin: 4px 0 10px;
}

.box span {
    font-size: var(--p-font);
    color: #F24E1E;
    font-weight: 600;
}

.box .bx {
    background: var(--main-color);        
    position: absolute;
    right: 0;
    top: 0;
    font-size: 20px;
    padding: 7px 10px;
    border-radius: 0 0.5rem 0 0.5rem;
    color:#fff;
}

/*----------------------------*/


a{
    text-decoration:none;
    color:#2e2e2e;
    font-weight: 600;
}
#header{
    background:#fff;
    width:100%;
    position:relative
}
#header:after{
    content:"";
    clear:both;
    display:block
} 

.headerlink{
    margin-right: 100px;
}
input{
    border:none;
    padding:10px;
    border-radius:20px
}
.logo{
    float:left;
    padding:20px 0 20px;
    margin-left: 50px;
}
.logo a{
    font-size:35px;
    display:block;
    padding:0 0 0 20px;
}
nav{
    float:right;
}
nav>ul{
    float:left;
    position:relative
}
nav li{
    list-style:none;
    float:left
}
nav li a{
    float:left;
    padding:35px
}
nav li a:hover{
    background:#f89779
}

  nav{
        display:none;
        width:100%;
        clear:both;
        float:none;
        max-height:400px;
        overflow-y:scroll
    }
  nav{
        padding:10px
    }
  nav ul{
        float:none
        }
  nav li{
        float:none
        }
  nav ul li a{
        float:none;
        padding:8px;
        display:block
    }
}
</style>

<head>

    <link rel="stylesheet" href="https://unpkg.com/boxicons@latest/css/boxicons.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">

</head>

<body>
    <div class="heading">
        <div class="titleMain">Menu</div>
    </div>
    <section class="menu" id="menu">

        @if(Menus.Count() >0)
        {
            <div class="menu-container">
                @foreach(var mnu in Menus)
                {
                    <div class="box">
                        <div class="box-img">
                            <img src="@imgSrc">
                        </div>
                        <h2>@mnu.Name</h2>
                        <h3>@mnu.Description</h3>
                        <span>Bs. @mnu.Price</span>
                        <i class='bx bx-dots-vertical-rounded'></i>
                    </div>
                }
            </div>
        }
    </section>
</body>

@code{

    Menu menu = new Menu();
    List<Menu> Menus = new List<Menu>();

    string imgSrc = "";
    string Message = "";
    IFileListEntry file = null;
    byte[] _fileBytes = null;

    protected override async Task OnInitializedAsync()
    {
        GetMenus();
    }

    private void GetMenus()
    {
        Menus = menuService.GetMenus();
        

    }

    public async Task HandleFileSelection(IFileListEntry[] files)
    {

        if (files.Count() > 0)
        {
            file = files.FirstOrDefault();
            using (var memoryStream = new System.IO.MemoryStream())
            {
                await file.Data.CopyToAsync(memoryStream);
                _fileBytes = memoryStream.ToArray();

                MenuPC menuPC = new MenuPC(menuService);
                var photo = menuPC.GetImage(Convert.ToBase64String(_fileBytes));

                imgSrc = string.Format("data:image/jpg;base64,{0}", Convert.ToBase64String(photo));

            }
        }
    }

    public void SaveMenu()
    {
        MenuPC menuPC = new MenuPC(menuService);

        Message = menuPC.SaveInformation(_fileBytes, menu);

        menu = new Menu();
        imgSrc = "";
        GetMenus();
    }

    private void Edit(string menuId)
    {
        MenuPC menuPC = new MenuPC(menuService);
        menu = menuPC.GetMenu(menuId);
        imgSrc = menu.ImageUrl;
        Message = "";
    }

    public void GetMenu()
    {
        
    }
}
